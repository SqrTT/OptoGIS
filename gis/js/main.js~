function trans(x,y){
    return new OpenLayers.LonLat(x,y).transform(
            new OpenLayers.Projection("EPSG:4326"), // –ø–µ—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ WGS 1984
            new OpenLayers.Projection("EPSG:900913") // –ø–µ—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
    );
};


function clickObj(record){
	var rpoint=/point-(\d+)/;
	var lpoint=/line-(\d+)/;
	var arr=rpoint.exec(record.data.id)
	var arr2=lpoint.exec(record.data.id)	
	if( arr != null ){
		if(record.data.checked){
			alert("Point "+arr[1]);
		};
	}else if(arr2 != null ){
		if(record.data.checked){
			alert("Line "+arr2[1]);
		};
	}else{	
		
		alert("Wrong object!");
	};

};


function clickListener(view,record){
    console.log(view);
    console.log(record);
    //alert("hello");
	
   if(record.isLeaf()){
		//alert(record.data.text);
		clickObj(record);			
		return;
	};    

    for(a in record.childNodes){
	if(record.data.checked == true || record.data.checked == false){
		record.childNodes[a].data.checked= !record.data.checked;
	}
    };
	view.refresh();    

};


function main(){


		
	var store = Ext.create('Ext.data.TreeStore', {
	    proxy: {
	    root: {id: 'src', text: 'Main'},	
            type: 'ajax',
            //the store will get the content from the .json file
            url: '/gis/index.php?r=site/layers'
        },
        sorters: [{
            property: 'leaf',
            direction: 'ASC'
        }, {
            property: 'text',
            direction: 'ASC'
        }],

	});



            var item2 = Ext.create('Ext.Panel', {
                title: 'Settings',
                html: '&lt;empty panel&gt;',
                cls:'empty'
            });


            var accordion = Ext.create('Ext.Panel', {
                title: 'Menu',
                collapsible: true,
                region:'west',
                margins:'5 0 5 5',
                split:true,
                width: 250,
                layout:'accordion',
                items: [
			{xtype: 'treepanel',title: 'Layers', store: store, expanded: false,rootVisible: false,
			listeners: {
			    itemclick: { fn: clickListener }
			    }
			},
			 item2
		],
		  
		                                                                                                
            });


            var viewport = Ext.create('Ext.Viewport', {
                layout:'border',
                items:[accordion,{
                    region: 'center',
                    xtype: 'tabpanel',
                    items: [{
                        title: 'map',
                        html: '<div id="main-map"</div>'
                    }, {
                        title: 'Another Tab',
                        html: 'Hello world 2'
                    }],
		}],
	     });

    


	//open layers

    map = new OpenLayers.Map("main-map");//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    var mapnik = new OpenLayers.Layer.OSM();//—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—è –∫–∞—Ä—Ç—ã
    //map.addLayer(mapnik);//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è
    map.setCenter(trans(22.717222,48.445278), 13 );
    
	 // ———–ª–∫–∞ –≤–Ω–∏–∑— –∫–∞——— –Ω–∞ —–µ–∫——–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ/–º–∞———–∞–±
	//map.addControl(new OpenLayers.Control.Permalink());
	//map.addControl(new OpenLayers.Control.Permalink('permalink'));
	map.addControl(new OpenLayers.Control.LayerSwitcher());
	
	
	var markers = new OpenLayers.Layer.Markers( "Nodes" );
	map.addLayer(markers);
	        
	var size = new OpenLayers.Size(21,25);
	var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
	var icon = new OpenLayers.Icon('http://www.openlayers.org/dev/img/marker.png', size, offset);
	//markers.addMarker(new OpenLayers.Marker(trans(22.717222,48.445278),icon));
	//markers.addMarker(new OpenLayers.Marker(trans(22.717222,48.445388),icon.clone()));    	  
	// –∫–æ–æ—–¥–∏–Ω–∞—— —–µ–∫——–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏— –º——–∏
	// –°–æ–∑–¥–∞–µ–º —–ª–æ–∏-–∫–∞——— VirtualEarth
	//var veroad = new OpenLayers.Layer.VirtualEarth("Virtual Earth Roads", { 'type': VEMapStyle.Road, sphericalMercator: true });
	//var veaer = new OpenLayers.Layer.VirtualEarth("Virtual Earth Aerial", { 'type': VEMapStyle.Aerial, hericalMercator: true });
	//var vehyb = new OpenLayers.Layer.VirtualEarth("Virtual Earth Hybrid", { 'type': VEMapStyle.Hybrid, sphericalMercator: true });
	
	//map.addLayers([ veroad, veaer, vehyb]);
	
	
	map.addControl(new OpenLayers.Control.ScaleLine());
	map.addControl(new OpenLayers.Control.MousePosition());
    //var layerMarkers = new OpenLayers.Layer.Markers("Markers");//—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π –º–∞—Ä–∫–µ—Ä–æ–≤
    //map.addLayer(layerMarkers);//–¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —Å–ª–æ–π –∫ –∫–∞—Ä—Ç–µ
    //map.events.register('click', map, function (e) {    
    //    var size = new OpenLayers.Size(21, 25);//—Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
    //    var offset = new OpenLayers.Pixel(-(size.w / 2), -size.h); //—Å–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
    //    var icon = new OpenLayers.Icon('/Images/smilies.png', size, offset);//–∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
    //    layerMarkers.addMarker(//–¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∫ —Å–ª–æ—é –º–∞—Ä–∫–µ—Ä–æ–≤
    //        new OpenLayers.Marker(map.getLonLatFromViewPortPx(e.xy), //–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å—Ç–∞–≤–∫–∏ –º–∞—Ä–∫–µ—Ä–∞
    //        icon));//–∏–∫–æ–Ω–∫–∞ –º–∞—Ä–∫–µ—Ä–∞
    //}); //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ		           

 };
